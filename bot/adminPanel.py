import telebot
import config as cfg
from utils import *
from telebot import types  # –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
import threading
import time
import random
import string
import re
class AdminCatalog:
    def __init__(self, bot, dataBase, parent):
        self.bot = bot
        self.db = dataBase
        self.parent = parent  # –°—Å—ã–ª–∫–∞ –Ω–∞ TelegramBot
        self.temp_notification_data = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self.audienceTextForNotification = {}
        self.listOfUsersForNotification = []

    def adminMenu(self):
        if (self.parent.tempDataIsUserInCallBack.get(cfg.admin, False)): return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞")
        markup.add("–ó–∞–∫—Ä—ã—Ç—å –±–æ—Ç–∞")
        markup.add("–í—ã–ª–æ–∂–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        markup.add("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è e-mail –∫–æ–Ω—Ç—Ä–æ–ª—è")
        markup.add("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î")
        markup.add("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        markup.add("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è io.net")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è")
        self.bot.send_message(
            chat_id=cfg.admin,
            text="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:",
            reply_markup=markup
        )
        self.bot.register_next_step_handler_by_chat_id(cfg.admin, self.adminActions)

    def adminActions(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(cfg.admin, False)): return
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.adminActions)
        text = message.text.strip().lower()

        if text == "–æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞":
            if(self.parent.isOpenBot):
                self.bot.send_message(cfg.admin, "–ë–æ—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç")
                return self.adminMenu()
            self.bot.send_message(cfg.admin, "–ë–æ—Ç –æ—Ç–∫—Ä—ã—Ç")
            self.parent.isOpenBot = True
            self.temp_notification_data = {
                'text': "üöÄ–ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å —á—Ç–æ, –±–æ—Ç –Ω–∞—á–∞–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É!üéâ\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞",
                'photo': None
            }
            self.collectUsers()

        elif text == "–∑–∞–∫—Ä—ã—Ç—å –±–æ—Ç–∞":
            if(not self.parent.isOpenBot):
                self.bot.send_message(cfg.admin, "–ë–æ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
                return self.adminMenu()
            self.bot.send_message(cfg.admin, "–ë–æ—Ç –∑–∞–∫—Ä—ã—Ç")
            self.parent.isOpenBot = False
            self.adminMenu()

        elif text == "–≤—ã–ª–æ–∂–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            self.bot.send_message(cfg.admin, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
            self.bot.register_next_step_handler(message, self.handleNotification)

        elif text == "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è e-mail –∫–æ–Ω—Ç—Ä–æ–ª—è":
            self.generateNewCodeForPassingEmailControl()
            self.adminMenu()

        elif text == "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            self.bot.send_message(cfg.admin, "–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            self.bot.register_next_step_handler(message, self.handleIdOfUserToResetRegistration)
        elif text == "—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥":
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.bot.send_message(cfg.admin, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            self.bot.register_next_step_handler(message, self.handleDeleteUser)

        elif text == "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è io.net":
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.bot.send_message(cfg.admin, "–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
            self.bot.send_message(cfg.admin, "–ü–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://ai.io.net/ai/api-keys")
            self.bot.register_next_step_handler(message, self.handleNewToken)

        elif message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è":
            if(self.parent.isOpenBot):
                self.parent.showMainMenu(message)
            else:
                self.bot.send_message(cfg.admin, "–ë–æ—Ç –∑–∞–∫—Ä—ã—Ç. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞")
                self.adminMenu()

        else:
            self.bot.send_message(cfg.admin, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")
            self.adminMenu()

    def handleIdOfUserToResetRegistration(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(cfg.admin, False)): return
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleIdOfUserToResetRegistration)
        if not message.text or not isinstance(message.text, str):
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Id.")
            return self.bot.register_next_step_handler(message, self.handleAge)

        text = message.text.strip()
        if not re.fullmatch(r'\d+', text):
            self.bot.send_message(message.chat.id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return self.bot.register_next_step_handler(message, self.handleAge)

        if(self.parent.registration.resetUserById(int(text))):
            self.bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
        else:
            self.bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ tempData")
        self.adminMenu()

    def handleNewToken(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(cfg.admin, False)): return
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleNewToken)
        new_token = message.text.strip()
        cfg.update_openrouter_key(new_token)
        self.bot.send_message(message.chat.id, "‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.")
        self.adminMenu()

    def generateNewCodeForPassingEmailControl(self):
        if (self.parent.tempDataIsUserInCallBack.get(cfg.admin, False)): return
        self.bot.send_message(cfg.admin, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞...")

        chars = string.ascii_letters + string.digits
        self.parent.codeForPassingEmailControl = ''.join(random.choice(chars) for _ in range(10))
        self.bot.send_message(cfg.admin, self.parent.codeForPassingEmailControl)
    def handleDeleteUser(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(cfg.admin, False)): return
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleDeleteUser)
        if message.text.isdigit():
            if self.db.deleteUserById(int(message.text)):
                self.parent.tempDataIsUserInCallBack.pop(message.chat.id, None)
                self.bot.send_message(cfg.admin, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} —É–¥–∞–ª—ë–Ω –∏–∑ –ë–î")
            else:
                self.bot.send_message(cfg.admin, f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.text}")
            if(self.db.deleteUserById(cfg.admin)):
                self.adminMenu()
        else:
            self.bot.send_message(cfg.admin, f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
            self.adminMenu()

    def handleNotification(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(cfg.admin, False)): return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)

        if message.content_type == 'photo':
            file_id = message.photo[-1].file_id  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.temp_notification_data['photo'] = file_id
            self.temp_notification_data['text'] = message.caption or ""
        elif message.content_type == 'text':
            self.temp_notification_data['text'] = message.text
            self.temp_notification_data['photo'] = None
        else:
            self.bot.send_message(cfg.admin, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")
            return self.bot.register_next_step_handler(message, self.handleNotification)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é
        self.bot.send_message(
            cfg.admin,
            "–î–ª—è –∫–∞–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ?\n–§–æ—Ä–º–∞—Ç: –ì–æ—Ä–æ–¥:–õ–∏–ø–µ—Ü–∫, –í–£–ó:None"
        )
        self.bot.register_next_step_handler(message, self.handleNotificationAudience)

    def handleNotificationAudience(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(cfg.admin, False)): return
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleNotificationAudience)
        audience_text = message.text.strip()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
        try:
            for item in audience_text.split(","):
                key, value = item.split(":")
                self.audienceTextForNotification[key.strip()] = value.strip() if value.strip().lower() != "none" else None
        except ValueError:
            self.bot.send_message(cfg.admin, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ì–æ—Ä–æ–¥:–õ–∏–ø–µ—Ü–∫, –í–£–ó:None")
            self.bot.register_next_step_handler(message, self.handleNotificationAudience)
            return

        else:
            if self.temp_notification_data.get('photo'):
                self.bot.send_photo(
                    cfg.admin,
                    self.temp_notification_data['photo'],
                    caption=self.temp_notification_data['text'],
                    reply_markup=createReplyKeyboard(["–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"])
                )
            else:
                self.bot.send_message(
                    cfg.admin,
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:\n{self.audienceTextForNotification}\n–¢–µ–∫—Å—Ç: {self.temp_notification_data['text']}",
                    reply_markup=createReplyKeyboard(["–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"])
                )

            self.bot.register_next_step_handler(message, self.checkIsAudienceForNotificationCorrect)

    def checkIsAudienceForNotificationCorrect(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(cfg.admin, False)): return
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.checkIsAudienceForNotificationCorrect)
        options = [
            "–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ",
            "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è",
        ]

        if message.text not in options:
            self.bot.send_message(
                cfg.admin
                ,
                "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫"
            )
            self.bot.register_next_step_handler(message, self.checkIsAudienceForNotificationCorrect)
            return

        if (self.parent.profileView.comeBackToTheMainMenu(message)):return

        else:
            self.collectUsers()
    def collectUsers(self):
        # –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è None
        if all(v is None for v in self.audienceTextForNotification.values()):
            self.listOfUsersForNotification = self.db.getAllUserIds()
        # –í–£–ó –Ω–µ —É–∫–∞–∑–∞–Ω
        elif not (self.audienceTextForNotification.get('–ì–æ—Ä–æ–¥') is None):
            self.listOfUsersForNotification = self.db.getMatchingUsers(city=self.audienceTextForNotification.get('–ì–æ—Ä–æ–¥'))
        # –ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω
        else:
            self.listOfUsersForNotification = self.db.getMatchingUsers(city=self.audienceTextForNotification.get('–í–£–ó'))
        self.sendNotificationThread()

        self.bot.send_message(
            cfg.admin,
            "‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!"
        )

    def sendNotificationThread(self):
        if (self.parent.tempDataIsUserInCallBack.get(cfg.admin, False)): return
        def worker():
            for user_id in self.listOfUsersForNotification[:]:  # –∫–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                try:
                    if self.temp_notification_data.get('photo'):
                        self.bot.send_photo(
                            chat_id=user_id,
                            photo=self.temp_notification_data['photo'],
                            caption=self.temp_notification_data.get('text', '')
                        )
                    else:
                        self.bot.send_message(
                            chat_id=user_id,
                            text=self.temp_notification_data.get('text', '')
                        )
                except Exception:
                    self.db.deleteUserById(user_id)  # —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                time.sleep(0.5)
            self.finishedNotifyUsers()

        threading.Thread(target=worker).start()

    def finishedNotifyUsers(self):
        if (self.parent.tempDataIsUserInCallBack.get(cfg.admin, False)): return
        self.bot.send_message(
            cfg.admin,
            "‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        )
        self.audienceTextForNotification.clear()
        self.adminMenu()