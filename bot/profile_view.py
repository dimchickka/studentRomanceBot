from utils import *
from functools import partial
class ProfileView:
    def __init__(self, bot, dataBase, parent):
        self.bot = bot
        self.db = dataBase
        self.parent = parent  # –°—Å—ã–ª–∫–∞ –Ω–∞ TelegramBot
        self.tempDataMyCity = {}
        self.tempDataMyUniversity = {}
        self.tempDataCity = {}
    def handleViewProfiles(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        # –ï—Å–ª–∏ –ø–æ–ª –º—É–∂—Å–∫–æ–π (1), –∑–Ω–∞—á–∏—Ç –∏—Å–∫–∞—Ç—å –¥–µ–≤—É—à–µ–∫, –∏–Ω–∞—á–µ –ø–∞—Ä–Ω–µ–π
        target_label = "–î–µ–≤—É—à–∫–∏" if self.db.getSexById(message.chat.id) == 1 else "–ü–∞—Ä–Ω–∏"

        options = [
            f"{target_label} –∏–∑ –º–æ–µ–≥–æ –í–£–ó–∞",
            f"{target_label} –∏–∑ –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞",
            f"{target_label} –∏–∑ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞",
            "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è",
        ]
        markup = createReplyKeyboard(options, columns=1)

        self.bot.send_message(message.chat.id, "–ö–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?", reply_markup=markup)
        self.bot.register_next_step_handler(message, self.handleWhoWillWeFind)

    def handleWhoWillWeFind(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        # –ï—Å–ª–∏ –ø–æ–ª –º—É–∂—Å–∫–æ–π (1), –∑–Ω–∞—á–∏—Ç –∏—Å–∫–∞—Ç—å –¥–µ–≤—É—à–µ–∫, –∏–Ω–∞—á–µ –ø–∞—Ä–Ω–µ–π
        user_sex = self.db.getSexById(message.chat.id)
        target_label = "–î–µ–≤—É—à–∫–∏" if user_sex == 1 else "–ü–∞—Ä–Ω–∏"
        options = [
            f"{target_label} –∏–∑ –º–æ–µ–≥–æ –í–£–ó–∞",
            f"{target_label} –∏–∑ –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞",
            f"{target_label} –∏–∑ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞",
            "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è",
        ]

        if message.text not in options:
            self.bot.send_message(
                message.chat.id,
                "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫"
            )
            self.bot.register_next_step_handler(message, self.handleWhoWillWeFind)
            return

        if(self.comeBackToTheMainMenu(message)): return

        else:
            if message.text == f"{target_label} –∏–∑ –º–æ–µ–≥–æ –í–£–ó–∞":
                if message.chat.id in self.tempDataMyUniversity:
                    self.showNextProfile(message, self.tempDataMyUniversity)
                    return

                users = self.db.getMatchingUsers(
                    viewer_id=message.chat.id,
                    sex= not user_sex,
                    university=self.db.getFieldById(message.chat.id, "university")
                )
                if (not self.isListOfUsersFull(message, users, university=1)):
                    return
                self.tempDataMyUniversity[message.chat.id] = {}  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                self.tempDataMyUniversity[message.chat.id]['view_queue'] = users
                self.tempDataMyUniversity[message.chat.id]['view_index'] = 0
                self.showNextProfile(message, self.tempDataMyUniversity)

            elif message.text == f"{target_label} –∏–∑ –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞":
                city = self.db.getFieldById(message.chat.id, "city")
                if message.chat.id in self.tempDataMyCity:
                    self.showNextProfile(message, self.tempDataMyCity, city)
                    return
                users = self.db.getMatchingUsers(
                    viewer_id=message.chat.id,
                    sex= not user_sex,
                    city=city
                )
                if (not self.isListOfUsersFull(message, users, city=1)):
                    return
                self.tempDataMyCity[message.chat.id] = {}  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                self.tempDataMyCity[message.chat.id]['view_queue'] = users
                self.tempDataMyCity[message.chat.id]['view_index'] = 0
                self.showNextProfile(message, self.tempDataMyCity, cityName= city)

            elif message.text == f"{target_label} –∏–∑ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞":
                self.bot.send_message(message.chat.id,
                                      "üó∫Ô∏è –í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n–ü—Ä–∏–º–µ—Ä: –õ–∏–ø–µ—Ü–∫, –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥  (–≤–≤–æ–¥–∏ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã)")
                self.bot.register_next_step_handler(message, self.handleCitySelection)
                return


    def handleCitySelection(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        self.tempDataCity[message.chat.id] = {}  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        city = message.text.strip()

        if not isValidCityName(city):
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"
            )
            self.bot.register_next_step_handler(message, self.handleCitySelection)
            return

        user_sex = self.db.getSexById(message.chat.id)
        users = self.db.getMatchingUsers(
            viewer_id=message.chat.id,
            sex=not user_sex,
            city=city
        )
        if(not self.isListOfUsersFull(message, users, city = 1)):
            return
        self.tempDataCity[message.chat.id]['view_queue'] = users
        self.tempDataCity[message.chat.id]['view_index'] = 0
        self.showNextProfile(message, self.tempDataCity, cityName= city)

    def showNextProfile(self, message, tempData, cityName = None):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        user_id = message.chat.id

        # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        view_data = tempData.get(user_id, {})
        users = view_data.get('view_queue', [])
        index = view_data.get('view_index', 0)

        if index >= len(users):
            self.bot.send_message(user_id, "‚ùå–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–∫–∞ –≤—Å—ëüò¢\n–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã. –ò–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –∞–Ω–∫–µ—Ç—ã –µ—â—ë —Ä–∞–∑")
            user_sex = self.db.getSexById(message.chat.id)
            if(cityName):
                users = self.db.getMatchingUsers(
                    viewer_id=message.chat.id,
                    sex=not user_sex,
                    city=cityName
                )
                if (not self.isListOfUsersFull(message, users,isFinishedButWas = True, city=1)):
                    return
            else:
                users = self.db.getMatchingUsers(
                    viewer_id=message.chat.id,
                    sex=not user_sex,
                    university=self.db.getFieldById(message.chat.id, "university")
                )
                if (not self.isListOfUsersFull(message, users)):
                    return

            tempData[message.chat.id]['view_queue'] = users
            tempData[message.chat.id]['view_index'] = 0
            self.showNextProfile(message, tempData, cityName)
            return
        profile_id = users[index]
        self.sendProfileCard(message, profile_id)
        # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        self.bot.register_next_step_handler(message, lambda msg: self.handleProfileResponse(msg, tempData, cityName))

    def sendProfileCard(self, message, profile_id):
        user_id = message.chat.id
        profile = self.db.getUserById(profile_id)

        # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        user_id_, name, sex, city, university, course, age, description, photo = profile

        text = (
            f"–ò–º—è: {name}\n"
            f"üèôÔ∏è–ì–æ—Ä–æ–¥: {city}\n"
            f"üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:\n{university}, "
            f"üìö –ö—É—Ä—Å: {course}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
            f"üìù –û —Å–µ–±–µ: {description}\n"
        )
        # –ö–Ω–æ–ø–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚ù§Ô∏è –õ–∞–π–∫", "üíî –î–∏–∑–ª–∞–π–∫")
        markup.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã (—Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç)
        self.bot.send_photo(user_id, photo, caption=text, reply_markup=markup)

    def handleProfileResponse(self, message, tempData, cityName):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        user_id = message.chat.id
        action = message.text
        if action not in ["‚ù§Ô∏è –õ–∞–π–∫", "üíî –î–∏–∑–ª–∞–π–∫", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"]:
            self.bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π üëá")
            self.bot.register_next_step_handler(message, self.handleProfileResponse)
            return

        if self.comeBackToTheMainMenu(message): return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞
        if action == "‚ù§Ô∏è –õ–∞–π–∫":
            liked_profile = tempData[user_id]['view_queue'][tempData[user_id]['view_index']]
            self.parent.likeManager.handleLikes(liked_profile, message.chat.id)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
        tempData[user_id]['view_index'] += 1
        self.showNextProfile(message, tempData, cityName)


    def comeBackToTheMainMenu(self, message):
        if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è":
            self.parent.showMainMenu(message)
            return True

    def isListOfUsersFull(self, message, users, isFinishedButWas = False, city=None, university=None):
        if users:
            return True  # –í—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—É—Å—Ç–æ–π

        # –í—ã–≤–æ–¥–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
        if city:
            filter_info = "–≥–æ—Ä–æ–¥–µ"
        elif university:
            filter_info = "–í–£–ó–µ"

        if(isFinishedButWas):
            text = f"‚ùå–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–∫–∞ –≤—Å—ëüò¢, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã"
        else:
            text = f"‚ùå –í —ç—Ç–æ–º {filter_info} –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç üò¢"
        self.bot.send_message(
            message.chat.id,
            text
        )
        self.handleViewProfiles(message)
        return False
