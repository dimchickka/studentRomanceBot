#–í –¥–∏–ø—Å–∏–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ —á—Ç–æ –¥–µ–ª–∞—Ç—å, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –æ—Ç GPT –±—ã–ª –±–µ–∑ –º–æ–¥—É–ª—è think. –ê —Ç–æ –æ–Ω —Å–µ–π—á–∞—Å –≤–º–µ—Å—Ç–µ —Å think –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã –ò–ò –¥–µ–ª–∞–µ—Ç
#–¢–∞–∫–∂–µ –≤ –º–µ–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∏–∞–∫—Ç–∏–≤–∞—Ü–∏—é –∞–Ω–∫–µ—Ç—ã
import telebot
from database import Database
from telebot import types  # –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
import config as cfg
from bot.profile_view import ProfileView
from bot.registration import Registration
from likeManager import LikeManager
from bot.AIDescriptionForUser import AIDescription
from bot.deleteProfile import DeleteProfile
from bot.adminPanel import AdminCatalog
#–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è
import threading
import time
import datetime
from utils import *
#—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è —Å –ë–î –Ω—É–∂–Ω–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∑–¥–µ—Å—å, –∞ –Ω–µ –≤ —Ç–æ–º –∫–ª–∞—Å—Å–µ!
class TelegramBot:
    def __init__(self):
        self.bot = telebot.TeleBot(cfg.BOT_TOKEN)
        self.db = Database()
        self.adminCatalog = AdminCatalog(self.bot, self.db, parent=self)
        self.registration = Registration(self.bot, self.db, parent=self)
        self.isOpenBot = False
        self.codeForPassingEmailControl = 'aaaAAA56'
        self.profileDeleter = DeleteProfile(self.bot, self.db, parent=self)
        self.profileView = ProfileView(self.bot, self.db, parent=self)
        self.likeManager = LikeManager(self.bot, self.db, parent=self )
        self.aiDescription = AIDescription(self.bot, self.db, parent=self)
        self.tempDataIsUserInCallBack = {}
        self.tempDataHowManyTimesUserUsedDescriptionAIFunction = {}
        self.start_daily_operations()
        self._setup_handlers()  #–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
    def _setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
        self.registration.register_handlers()
        self.likeManager.register_handlers()


    def showMainMenu(self, message):
        if(self.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
        markup.add("–û–ø–∏—Å–∞–Ω–∏–µ –∫ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ –æ—Ç –ò–ò")
        markup.add("–ú–æ—è –∞–Ω–∫–µ—Ç–∞")
        markup.add("–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
        if(message.chat.id == cfg.admin):
            markup.add("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞")
        self.bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:",
            reply_markup=markup
        )
        self.bot.register_next_step_handler(message, self.handleMainMenu)

    def handleMainMenu(self, message):
        if (self.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleMainMenu)
        if message.text == "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã":
            self.profileView.handleViewProfiles(message)
        elif message.text == "–û–ø–∏—Å–∞–Ω–∏–µ –∫ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ –æ—Ç –ò–ò":
            self.aiDescription.handleAIProfileDescription(message)
        elif message.text == "–ú–æ—è –∞–Ω–∫–µ—Ç–∞":
            self.registration.checkMyProfile(message)
        elif message.text == "–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
            self.profileDeleter.handleDeleteProfile(message)
        elif (message.chat.id == cfg.admin and message.text == "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞"):
            self.adminCatalog.adminMenu()
        else:
            self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")
            self.bot.register_next_step_handler(message, self.handleMainMenu)

    def reset_usage_counter_daily_thread(self):
        while True:
            now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            self.tempDataHowManyTimesUserUsedDescriptionAIFunction.clear()
            self.notification_worker_who_liked_whom()
            time.sleep(24 * 60 * 60)  # 1 –¥–µ–Ω—å

    def start_daily_operations(self):
        # –ü–æ—Ç–æ–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        thread1 = threading.Thread(target=self.reset_usage_counter_daily_thread, daemon=True)
        thread1.start()

    def notification_worker_who_liked_whom(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
            users_to_notify = list(self.likeManager.tempDataWhoLikedWhom.keys())

            for user_id in users_to_notify:
                try:
                    if user_id in self.likeManager.tempDataWhoLikedWhom:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
                        self.likeManager.sendLikeNotification(user_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ worker: {e}")

    def run(self):
        while True:
            try:
                print(f"üîÅ Bot polling started at {datetime.datetime.now()}")
                self.bot.polling(non_stop=True, timeout=30)
                break
            except Exception as e:
                print(f"‚ùå Bot crashed at {datetime.datetime.now()}: {e}")
                time.sleep(1)

