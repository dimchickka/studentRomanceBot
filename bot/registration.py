#–ù—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤—Å—é –ª–æ–≥–∏–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: —Ñ–∞–π–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç –∏ –¥—Ä—É–≥–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –∏–∑ –º–µ–Ω—é
from utils import *
from telebot import types  # –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
import config as cfg

from validation import UniversityResolver
#–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è
from better_profanity import profanity
import re
#—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è —Å –ë–î –Ω—É–∂–Ω–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∑–¥–µ—Å—å, –∞ –Ω–µ –≤ —Ç–æ–º –∫–ª–∞—Å—Å–µ!

class Registration:
    def __init__(self, bot, dataBase, parent):
        self.bot = bot
        self.db = dataBase
        self.tempData = {}  # –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–∞ {chatId: { name: str, sex: bool, age: int, description: str}}
        self.parent = parent  # –°—Å—ã–ª–∫–∞ –Ω–∞ TelegramBot

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""  #–¥–∞–ª–µ–µ bot.polling —Å–∞–º –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∞—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –ú—ã —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–¥–µ—Å—å
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π self
        self.bot.callback_query_handler(
            func=lambda call: call.data.startswith("course_")
        )(lambda call: self.handle_inline_buttons_for_course(call))


        @self.bot.message_handler(func=lambda message: True)  # –õ–æ–≤–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        def handle_all_messages(message):
            if (message.chat.id in self.parent.tempDataIsUserInCallBack):
                return
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
            elif message.chat.id not in self.parent.tempDataIsUserInCallBack:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º —Å —Ñ–ª–∞–≥–æ–º False
                self.parent.tempDataIsUserInCallBack[message.chat.id] = False

            if self.db.getUserById(message.chat.id):
                if (self.parent.isOpenBot):
                    self.parent.showMainMenu(message)
                elif (message.chat.id == cfg.admin):
                    self.parent.adminCatalog.adminMenu()
                elif (not self.parent.isOpenBot):
                    self.bot.send_message(
                        message.chat.id,
                        "–î–æ 10 –∏—é–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω",
                        reply_markup=createReplyKeyboard(["–°–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"])
                    )
                    self.bot.register_next_step_handler(message, self.handleMenuUntilStart)
            else:
                self._handleStart(message)

    def _handleStart(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        self.tempData[message.chat.id] = {}  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        welcomeText = readFile(cfg.WELCOME_TEXT_PATH)
        self.bot.send_message(message.chat.id, welcomeText)
        self.bot.register_next_step_handler(message, self.handleName)


    def handleName(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleName)
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""

        if not message.text or not isinstance(message.text, str):
            self.bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑)")
            return self.bot.register_next_step_handler(message, self.handleName)

        name = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏–º—è —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ (—Ä—É—Å—Å–∫–∏–µ –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ)
        if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë]+$', name):
            self.bot.send_message(message.chat.id, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑)")
            return self.bot.register_next_step_handler(message, self.handleName)

        self.tempData[message.chat.id]['name'] = name
        self.askSex(message)

    def askSex(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        """–∑–∞–ø—Ä–æ—Å –ø–æ–ª–∞"""
        self.bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
            reply_markup=createReplyKeyboard(["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
        )
        self.bot.register_next_step_handler(message, self.handleSex)


    def handleSex(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleSex)
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞"""
        if message.text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫!")
            return self.askSex(message)
        self.tempData[message.chat.id]['gender'] = cfg.MALE if message.text == "–ú—É–∂—Å–∫–æ–π" else cfg.FEMALE
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        self.bot.send_message(
            chat_id=message.chat.id,
            text="–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
            reply_markup=types.ReplyKeyboardRemove()  # –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        )
        self.askAge(message)


    def askAge(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        """–∑–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        self.bot.register_next_step_handler(message, self.handleAge)


    def handleAge(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleAge)
        if not message.text or not isinstance(message.text, str):
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
            return self.bot.register_next_step_handler(message, self.handleAge)

        text = message.text.strip()
        if not re.fullmatch(r'\d+', text):
            self.bot.send_message(message.chat.id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return self.bot.register_next_step_handler(message, self.handleAge)

        age = int(text)

        if age < 15:
            self.bot.send_message(
                message.chat.id,
                "–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë —Å–ª–∏—à–∫–æ–º –º–æ–ª–æ–¥(–∞) –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ üòä\n"
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî 16 –ª–µ—Ç.\n–ï—Å–ª–∏ —Ç—ã —Å–ª—É—á–∞–π–Ω–æ –æ—à–∏–±—Å—è(–ª–∞—Å—å), —Ç–æ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å)"
            )
            self.bot.register_next_step_handler(message, self.handleAge)
            return cfg.SUCCESS

        elif age > 40:
            self.bot.send_message(
                message.chat.id,
                "–í—ã ‚Äî –∂–∏–≤–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ, —á—Ç–æ —É—á–∏—Ç—å—Å—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üòÑ\n"
                "–ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–µ –ø—Ä–æ—Ç–∏–≤, —á—Ç–æ —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –≤ —ç—Ç–æ–º –±–æ—Ç–µ 21 –≥–æ–¥?",
                reply_markup=createReplyKeyboard(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"])
            )
            self.tempData[message.chat.id]['age'] = int(age)

            # –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            def confirmContinue(m):
                if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
                if (message.chat.id not in self.tempData): return self._handleStart(message)
                # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                self.bot.send_message(
                    chat_id=message.chat.id,
                    text="–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ üëá –ü—Ä–∏–¥—É–º–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ãüòä",
                    reply_markup=types.ReplyKeyboardRemove()  # –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                )
                self.bot.register_next_step_handler(message, self.handleDescription)

            confirmContinue(message)
        else:
            # –í–æ–∑—Ä–∞—Å—Ç –≤ –Ω–æ—Ä–º–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            self.tempData[message.chat.id]['age'] = int(message.text)
            self.bot.send_message(
                message.chat.id,
                "–ü—Ä–∏–¥—É–º–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ãüòä\n"
            )
            self.bot.register_next_step_handler(message, self.handleDescription)


    def handleDescription(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleDescription)
        if not message.text or not isinstance(message.text, str):
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleDescription)

        description = message.text.strip()

        if not description:
            self.bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return self.bot.register_next_step_handler(message, self.handleDescription)

        if len(description) < 10:
            self.bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –†–∞—Å—Å–∫–∞–∂–∏ —á—É—Ç—å –±–æ–ª—å—à–µ.")
            return self.bot.register_next_step_handler(message, self.handleDescription)

        if len(description) > 300:
            self.bot.send_message(message.chat.id, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –£–ª–æ–∂–∏—Å—å –≤ 300 —Å–∏–º–≤–æ–ª–æ–≤.")
            return self.bot.register_next_step_handler(message, self.handleDescription)

        if re.search(r'https?://|www\.', description, re.IGNORECASE):
            self.bot.send_message(message.chat.id, "–í –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏.")
            return self.bot.register_next_step_handler(message, self.handleDescription)

        if profanity.contains_profanity(message.text):
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É.")
            return self.bot.register_next_step_handler(message, self.handleDescription)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        self.tempData[message.chat.id]['description'] = description
        # –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è –∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
        self.askCityAndUniversity(message)


    def askCityAndUniversity(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        """–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π"""
        self.bot.send_message(
            message.chat.id,
            "–í –∫–∞–∫–æ–º –í–£–ó–µ —Ç—ã —É—á–∏—à—å—Å—è? –ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –∏ —É–Ω–∏–≤–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ú–æ—Å–∫–≤–∞, –ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞"
        )
        self.bot.register_next_step_handler(message, self.validationCityAndUniversity)


    def validationCityAndUniversity(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.validationCityAndUniversity)
        if not message.text or not isinstance(message.text, str):
            self.bot.send_message(
                message.chat.id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ú–æ—Å–∫–≤–∞, –ú–ì–¢–£ –∏–º.–ë–∞—É–º–∞–Ω–∞:"
            )
            self.bot.register_next_step_handler(message, self.validationCityAndUniversity)
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UniversityResolver"""
        self.tempData[message.chat.id]['resolver'] = UniversityResolver()

        result = self.tempData[message.chat.id]['resolver'].resolve_city_and_university(message.text)

        if result == cfg.ERROR_REQUEST:
            self.bot.send_message(
                message.chat.id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ú–æ—Å–∫–≤–∞, –ú–ì–¢–£ –∏–º.–ë–∞—É–º–∞–Ω–∞:"
            )
            self.bot.register_next_step_handler(message, self.validationCityAndUniversity)
        else:

            """–∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
            confirmation_text = (
                f"–Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?\n"
                f"üèô –ì–æ—Ä–æ–¥: {self.tempData[message.chat.id]['resolver'].city}\n"
                f"üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {self.tempData[message.chat.id]['resolver'].university}\n\n"
                f"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ - –Ω–∞–∂–º–∏ '–î–∞', –µ—Å–ª–∏ –Ω–µ—Ç - '–ù–µ—Ç'"
            )

            self.bot.send_message(
                message.chat.id,
                confirmation_text,
                reply_markup=createReplyKeyboard(["–î–∞", "–ù–µ—Ç"])
            )
            self.bot.register_next_step_handler(message, self.handleUniversity)


    def handleUniversity(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleUniversity)
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–Ω–∏–≤–µ—Ä–∞"""
        if message.text not in ["–î–∞", "–ù–µ—Ç"]:
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫!")
            self.bot.register_next_step_handler(message, self.handleUniversity)
            return cfg.SUCCESS
        else:
            if message.text == "–î–∞":
                self.tempData[message.chat.id]['city'] = self.tempData[message.chat.id]['resolver'].city
                self.tempData[message.chat.id]['university'] = self.tempData[message.chat.id]['resolver'].university
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                course_keyboard = createInlineKeyboard(["1", "2", "3", "4", "5", "6", "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞"],
                                                       "course_")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                self.bot.send_message(
                    chat_id=message.chat.id,
                    text="–ù–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ?",
                    reply_markup=course_keyboard
                )
                return cfg.SUCCESS
            else:
                self.bot.send_message(
                    message.chat.id,
                    "–•–º... –°—Ç—Ä–∞–Ω–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ú–æ—Å–∫–≤–∞, –ú–ì–¢–£. –∏–º –ë–∞—É–º–∞–Ω–∞:"
                )
                self.bot.register_next_step_handler(message, self.validationCityAndUniversity)
                return cfg.SUCCESS

    def confirmEMAILExicting(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.confirmEMAILExicting)
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—á—Ç–∞?"""
        if message.text == self.parent.codeForPassingEmailControl:
            self.bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ, —Ä–∞–∑—Ä–µ—à–∞—é —Ç–µ–±–µ –Ω–µ –≤–≤–æ–¥–∏—Ç—å –ø–æ—á—Ç—É!")
            if(message.chat.id != cfg.admin): self.parent.adminCatalog.generateNewCodeForPassingEmailControl()
            self.askPhoto(message)
            return cfg.SUCCESS
        if message.text not in ["–î–∞", "–ù–µ—Ç"]:
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫!")
            self.bot.register_next_step_handler(message, self.confirmEMAILExicting)
            return cfg.SUCCESS
        else:
            if message.text == "–î–∞":
                # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                self.bot.send_message(
                    chat_id=message.chat.id,
                    text="–í–≤–æ–¥–∏ –µ—ë —Å—é–¥–∞. –ù–∞ –Ω–µ—ë –ø—Ä–∏–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –∫–æ–¥",
                    reply_markup=types.ReplyKeyboardRemove()  # –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                )
                self.bot.register_next_step_handler(message, self.validationEmail)
                return cfg.SUCCESS
            else:
                self.bot.send_message(
                    message.chat.id,
                    f"–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –∏–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã —è–≤–ª—è–µ—à—å—Å—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º. –ï—Å–ª–∏ —Ç—ã –æ—á–µ–Ω—å —Ö–æ—á–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–¥–µ—Å—å –Ω–∞–ø–∏—à–∏ {cfg.SUPPORT}, –º—ã —Ç–µ–±–µ –ø–æ–º–æ–∂–µ–º"
                )

                self.bot.send_message(
                    message.chat.id,
                    f"–ï—Å–ª–∏ —Ç—ã –æ—à–∏–±—Å—è, –∏ —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–∂–∞–ª –Ω–µ—Ç, —Ç–æ –≤–≤–æ–¥–∏ –ø–æ—á—Ç—É:"
                )
                self.bot.register_next_step_handler(message, self.validationEmail)
                return cfg.SUCCESS
    def validationEmail(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.validationEmail)
        resolver = self.tempData[message.chat.id]['resolver']
        result = resolver.is_university_email(message.text)

        if result != cfg.ERROR_REQUEST:
            resolver.send_email_code(message.text)
            self.bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—É—é –ø–æ—á—Ç—É –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í–≤–æ–¥–∏ –µ–≥–æ —Å—é–¥–∞")
            self.bot.register_next_step_handler(message, self.check_validation_code)

        else:
            self.bot.send_message(message.chat.id,
                                  f"–ò–∑–≤–∏–Ω–∏, –Ω–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É. –ù–∞–ø—Ä–∏–º–µ—Ä: ya_sudent@student.bmstu.ru\n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑\nP.S. –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ –Ω–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º {cfg.SUPPORT} –º—ã –∏—Å–ø—Ä–∞–≤–∏–º –ø—Ä–æ–±–ª–µ–º—É")
            self.bot.register_next_step_handler(message, self.validationEmail)


    def check_validation_code(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.check_validation_code)
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        result = self.tempData[message.chat.id]['resolver'].check_verification_code(message.text)
        if (result):
            self.askPhoto(message)
        else:
            if 'quantity_code_email' not in self.tempData[message.chat.id]:
                self.bot.send_message(
                    message.chat.id,
                    "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–≤–µ—Ä–Ω—ã–π\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑"
                )
                self.tempData[message.chat.id]['quantity_code_email'] = 1
                self.bot.register_next_step_handler(message, self.check_validation_code)
            elif (self.tempData[message.chat.id].get('quantity_code_email', 0) > 4):
                self.bot.send_message(
                    message.chat.id,
                    f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–≤–µ—Ä–Ω—ã–π\n–¢—ã –ª–∏–±–æ –±–∞–ª—É–µ—à—å—Å—è, –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã\n–ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–µ, —Ç–æ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {cfg.SUPPORT}"
                )
            else:
                self.bot.send_message(
                    message.chat.id,
                    "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–≤–µ—Ä–Ω—ã–π\n–î–∞–≤–∞–π —è –æ—Ç–ø—Ä–∞–≤–ª—é –∫–æ–¥ –µ—â—ë —Ä–∞–∑",
                    reply_markup=createReplyKeyboard(["–î–∞, –¥–∞–≤–∞–π", "–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –ø–æ—á—Ç—É"])
                )
                self.tempData[message.chat.id]['quantity_code_email'] += 1
                self.bot.register_next_step_handler(message, self.checkAnswerToSendCodeOneMoreTime)


    def checkAnswerToSendCodeOneMoreTime(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.checkAnswerToSendCodeOneMoreTime)
        if (message.text == "–î–∞, –¥–∞–≤–∞–π"):
            self.bot.send_message(message.chat.id, "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤–≤–æ–¥–∏ –µ–≥–æ —Å—é–¥–∞! –í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –æ—à–∏–±–∞–π—Å—è)")
            self.bot.register_next_step_handler(message, self.check_validation_code)
        elif (message.text == "–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –ø–æ—á—Ç—É"):
            self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å—é–¥–∞ —Å–≤–æ—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É. –í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –æ—à–∏–±–∞–π—Å—è)")
            self.bot.register_next_step_handler(message, self.validationEmail)
        else:
            self.bot.send_message(message.chat.id,
                                  "–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –°–∫–∞–∂–∏: \"–î–∞, –¥–∞–≤–∞–π\" –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ!")
            self.bot.register_next_step_handler(message, self.checkAnswerToSendCodeOneMoreTime)


    def askPhoto(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        """–∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ"""
        self.bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã:")
        self.bot.register_next_step_handler(message, self.handlePhoto)  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ handlePhoto


    def handlePhoto(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        if message.content_type != "photo":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ")
            return self.bot.register_next_step_handler(message, self.handlePhoto)
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        if message.content_type != 'photo':
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ!")
            return self.bot.register_next_step_handler(message, self.handlePhoto)

        try:
            photo = message.photo[-2]  # –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            compressedPhoto = downloadAndCompressPhoto(self.bot, photo.file_id)

            if not compressedPhoto:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ")

            self.tempData[message.chat.id]['photo'] = compressedPhoto

            self.finishRegistration(message)

        except Exception as e:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å –¥—Ä—É–≥–æ–µ) ")
            self.bot.register_next_step_handler(message, self.handlePhoto)


    def finishRegistration(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö"""
        user_data = self.tempData.get(message.chat.id, {})
        course = user_data.get('course')
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        confirmation_message = (
            "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"–ò–º—è: {user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ü–æ–ª: {'–º—É–∂—Å–∫–æ–π' if user_data.get('gender') == 1 else '–∂–µ–Ω—Å–∫–∏–π' if user_data.get('gender') == 0 else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–ì–æ—Ä–æ–¥: {user_data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í–£–ó: {user_data.get('university')}, "
            f"{f'{course} –∫—É—Ä—Å' if course not in ['–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞'] else course}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {user_data.get('description')}\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º (caption)
        self.bot.send_photo(
            chat_id=message.chat.id,
            photo=user_data.get('photo'),  # –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
            caption=confirmation_message,  # –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
            reply_markup=createReplyKeyboard(['–î–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ'])
        )
        self.bot.register_next_step_handler(message, self.checkCorrectionData)


    def checkCorrectionData(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if (message.chat.id not in self.tempData): return self._handleStart(message)
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.checkCorrectionData)
        if message.text not in ["–î–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"]:
            self.bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫!")
            self.bot.register_next_step_handler(message, self.checkCorrectionData)

        elif message.text == "–î–∞":
            if(not self.db.getUserById(message.chat.id)):
                user_data = self.tempData.get(message.chat.id, {})
                self.db.addUser(
                    userId=message.chat.id,
                    username=user_data.get('name'),
                    sex=user_data.get('gender'),
                    city=user_data.get('city'),
                    university=user_data.get('university'),
                    course=user_data.get('course'),
                    age=user_data.get('age'),
                    description=user_data.get('description'),
                    photo=user_data.get('photo')  # –ü–µ—Ä–µ–¥–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                )
            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            self.bot.send_message(
                chat_id=message.chat.id,
                text="‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                reply_markup=types.ReplyKeyboardRemove()  # –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            )
            if(self.parent.isOpenBot):
                self.parent.showMainMenu(message)
            else:
                if (message.chat.id == cfg.admin):
                    self.parent.adminCatalog.adminMenu()
                else:
                    self.bot.send_message(message.chat.id,"–ë–æ—Ç –Ω–∞—á–Ω—ë—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å 10 –∏—é–ª—è, –º—ã —Ç–µ–±—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–∏–º", reply_markup = createReplyKeyboard(["–°–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"]))

                    with open(cfg.RAFFLE_TEXT_PATH, "r", encoding="utf-8") as f:
                        raffle_text = f.read()

                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                    with open(cfg.RAFFLE_PHOTO_PATH, "rb") as photo:
                        self.bot.send_photo(message.chat.id, photo, caption=raffle_text)
                    self.bot.register_next_step_handler(message, self.handleMenuUntilStart)

        else:
            if (self.db.getUserById(message.chat.id)):
                self.db.deleteUserById(message.chat.id)
            self.bot.send_message(message.chat.id, "–° —Ö–æ—Ä–æ—à–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –º–æ–∂–Ω–æ –∏ 2 —Ä–∞–∑–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            self.bot.register_next_step_handler(message, self.handleName)
        self.tempData.pop(message.chat.id, None)

    def handle_inline_buttons_for_course(self, call):
        if (self.parent.tempDataIsUserInCallBack.get(call.message.chat.id, False)): return
        if (call.message.chat.id not in self.tempData): return self._handleStart(call.message)
        if(self.tempData.get(call.message.chat.id, {})):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±–æ—Ä
            if 'course' in self.tempData.get(call.message.chat.id, {}):
                return
            selected_option = call.data.replace("course_", "")  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            chat_id = call.message.chat.id

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
            self.tempData[chat_id]['course'] = selected_option

            self.bot.send_message(
                chat_id,
                "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –≤ –í–£–ó–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞?",
                reply_markup=createReplyKeyboard(["–î–∞", "–ù–µ—Ç"])
            )
            self.bot.register_next_step_handler(call.message, self.confirmEMAILExicting)
        else:
            return

    def handleMenuUntilStart(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleMenuUntilStart)
        if(not self.parent.isOpenBot):
            if (message.text == "–°–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É"):
                self.checkMyProfile(message)
            elif(message.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"):
                self.bot.send_message(message.chat.id, "–° —Ö–æ—Ä–æ—à–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –º–æ–∂–Ω–æ –∏ 2 —Ä–∞–∑–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
                self.db.deleteUserById(message.chat.id)
                self.tempData[message.chat.id] = {}  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                self.bot.register_next_step_handler(message, self.handleName)
            else:
                self.bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫!")
                self.bot.send_message(
                    message.chat.id,
                    "–ë–æ—Ç –Ω–∞—á–Ω—ë—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å 10 –∏—é–ª—è. –ü–æ–∫–∞ —Ç—ã –º–æ–∂–µ—à—å —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã",
                    reply_markup=createReplyKeyboard(["–°–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"])
                )
                self.bot.register_next_step_handler(message, self.handleMenuUntilStart)
        else:
            self.parent.showMainMenu(message)

    def checkMyProfile(self, message):
        if (self.parent.tempDataIsUserInCallBack.get(message.chat.id, False)): return
        profile = self.db.getUserById(message.chat.id)

        # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        user_id_, name, sex, city, university, course, age, description, photo = profile
        sex_text = "–ú—É–∂—Å–∫–æ–π" if self.db.getSexById(message.chat.id) == 1 else "–ñ–µ–Ω—Å–∫–∏–π"
        text = (
            f"–ò–º—è: {name}\n"
            f"–ü–æ–ª: {sex_text}\n"
            f"üèôÔ∏è–ì–æ—Ä–æ–¥: {city}\n"
            f"üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:\n{university}, "
            f"üìö –ö—É—Ä—Å: {course}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
            f"üìù –û —Å–µ–±–µ: {description}\n"
        )
        if(self.parent.isOpenBot):
            self.bot.send_photo(message.chat.id, photo, caption=text)
            self.parent.showMainMenu(message)
        else:
            self.bot.send_photo(message.chat.id, photo, caption=text, reply_markup=createReplyKeyboard(["–°–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"]))
            self.bot.register_next_step_handler(message, self.handleMenuUntilStart)

    def resetUserById(self, user_id):
        if(self.parent.tempDataIsUserInCallBack.get(cfg.admin, False)): return
        if user_id not in self.tempData:
            return False
        self.tempData.pop(user_id, None)
        return True

