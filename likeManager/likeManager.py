from utils import *
import telebot
class LikeManager:
    def __init__(self, bot, dataBase, parent):
        self.bot = bot
        self.db = dataBase
        self.parent = parent  # –°—Å—ã–ª–∫–∞ –Ω–∞ TelegramBot
        self.tempDataWhoLikedWhom = {}  #–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–≥–æ –ª–∞–π–∫–Ω—É–ª–∏: [...] - —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""  #–¥–∞–ª–µ–µ bot.polling —Å–∞–º –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∞—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –ú—ã —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–¥–µ—Å—å
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π self
        self.bot.callback_query_handler(
            func=lambda call: call.data.startswith("view_likes")
        )(lambda call: self.handleViewLikesCallback(call))


    def handleLikes(self, whoHasBeenLiked, whoLiked):
        """
        whoHasBeenLiked ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –ª–∞–π–∫–Ω—É–ª–∏
        whoLiked ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ª–∞–π–∫–Ω—É–ª
        """

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –¥–ª—è –Ω–µ–≥–æ –∑–∞–ø–∏—Å—å
        if whoHasBeenLiked not in self.tempDataWhoLikedWhom:
            self.tempDataWhoLikedWhom[whoHasBeenLiked] = [whoLiked]
            self.sendLikeNotification(whoHasBeenLiked)
        else:
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
            if whoLiked not in self.tempDataWhoLikedWhom[whoHasBeenLiked]:
                self.tempDataWhoLikedWhom[whoHasBeenLiked].append(whoLiked)

    def handleViewLikesCallback(self, call):
        user_id = call.from_user.id
        if (self.parent.tempDataIsUserInCallBack.get(user_id)):return
        if(not self.db.getUserById(user_id)):return
        self.parent.tempDataIsUserInCallBack[user_id] = True

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂–µ–º, –∫—Ç–æ –≤–∞—Å –ª–∞–π–∫–Ω—É–ª üëá",
            reply_markup=None
        )

        self.sendNextLikerProfile(call)

    def sendNextLikerProfile(self, call):
        message = call.message
        self.sendNextLikerProfileProcessing(message)


    def sendNextLikerProfileProcessing(self, message):
        data = self.tempDataWhoLikedWhom.get(message.chat.id, {})
        if not data:
            self.bot.send_message(message.chat.id,
                                  "–ü–æ—Ö–æ–∂–µ —á—Ç–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–æ–≥–æ-—Ç–æ –Ω–∞—à—ë–ª —Å–µ–±–µüòï\n–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –º—ã —Ç–µ–±–µ —Ç–æ–∂–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –Ω–∞–π–¥—ë–º üòÑ")
            self.tempDataWhoLikedWhom.pop(message.chat.id, None)
            self.parent.tempDataIsUserInCallBack[message.chat.id] = False
            self.parent.showMainMenu(message)
            return

        liker_id = data[0]
        liker_data = self.db.getUserById(liker_id)

        if not liker_data:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî —É–¥–∞–ª—è–µ–º –µ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ
            data.pop(0)
            self.sendNextLikerProfile(message.chat.id)
            return
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è
        self.parent.profileView.sendProfileCard(message, liker_id)
        # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        self.bot.register_next_step_handler_by_chat_id(message.chat.id, self.handleProfileResponse)
        # self.bot.register_next_step_handler(user_id, self.handleProfileResponse)

    def handleProfileResponse(self, message):
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleProfileResponse)
        user_id = message.chat.id
        action = message.text
        data = self.tempDataWhoLikedWhom.get(user_id, {})
        liker_id = data[0]

        if action not in ["‚ù§Ô∏è –õ–∞–π–∫", "üíî –î–∏–∑–ª–∞–π–∫", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"]:
            self.bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π üëá")
            self.bot.register_next_step_handler(message, self.handleProfileResponse)
            return

        if self.parent.profileView.comeBackToTheMainMenu(message): return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞
        if action == "‚ù§Ô∏è –õ–∞–π–∫":
            username = self.getUsername(liker_id)
            if username:
                sex = "–ï—ë" if self.db.getSexById(message.chat.id) == 1 else "–ï–≥–æ"
                shortName = f"@{username}"
                self.bot.send_message(user_id, f"–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ü–∏—à–∏ üëâ {shortName}\nP.S. –¢–æ–ª—å–∫–æ —Ç—ã –º–æ–∂–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å. –¢–æ–ª—å–∫–æ —É —Ç–µ–±—è –µ—Å—Ç—å {sex} –∫–æ–Ω—Ç–∞–∫—Ç")
            else:
                self.db.deleteUserById(liker_id)
                self.bot.send_message(user_id, "–ü–æ—Ö–æ–∂–µ —á—Ç–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–æ–≥–æ-—Ç–æ –Ω–∞—à—ë–ª —Å–µ–±–µüòï\n –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –º—ã —Ç–µ–±–µ —Ç–æ–∂–µ –∫–æ–≥–æ –Ω–∏–±—É–¥—å –Ω–∞–π–¥—ë–º üòÑ")
        data.pop(0)
        self.handleOneMoreUserWhoLiked(message)
    def handleOneMoreUserWhoLiked(self, message):
        data = self.tempDataWhoLikedWhom.get(message.chat.id, {})
        if(data):
            markup = createReplyKeyboard(["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"])
            self.bot.send_message(message.chat.id, "–í —Å–ø–∏—Å–∫–µ, –∫–æ–º—É –≤—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å, –µ—Å—Ç—å –µ—â—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", reply_markup=markup)
            self.bot.register_next_step_handler(message, self.handleContinueViewOnProfilesOfUsersWhoLikedYou)
        else:
            self.parent.tempDataIsUserInCallBack[message.chat.id] = False
            self.tempDataWhoLikedWhom.pop(message.chat.id, None)
            self.parent.showMainMenu(message)
    def handleContinueViewOnProfilesOfUsersWhoLikedYou(self, message):
        if message.content_type != "text":
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.handleContinueViewOnProfilesOfUsersWhoLikedYou)
        user_id = message.chat.id
        action = message.text
        if action not in ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"]:
            self.bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π üëá")
            self.bot.register_next_step_handler(message, self.handleContinueViewOnProfilesOfUsersWhoLikedYou)
            return
        if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è":
            self.parent.tempDataIsUserInCallBack[message.chat.id] = False
            self.sendLikeNotification(message.chat.id)
            self.parent.showMainMenu(message)
            return
        self.sendNextLikerProfileProcessing(message)

    def getUsername(self, user_id):
        try:
            chat = self.bot.get_chat(user_id)
            return chat.username or None
        except Exception as e:
            self.db.deleteUserById(user_id)  # –¢–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î
            return None

    def sendLikeNotification(self, user_id):
        try:
            markup = createInlineKeyboard(["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ"], callback_prefix="view_likes")
            self.bot.send_message(user_id, "‚ù§Ô∏è –ö—Ç–æ-—Ç–æ –ø—Ä–æ—è–≤–∏–ª –∫ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å!", reply_markup=markup)

        except telebot.apihelper.ApiTelegramException as e:
            error_text = str(e).lower()

            if any(keyword in error_text for keyword in [
                "chat not found",
                "bot was blocked",
                "user is deactivated",
                "user not found",
                "can't initiate conversation",
                "user is not a member"
            ]):
                self.db.deleteUserById(user_id)  # –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
            else:
                return cfg.ERROR_REQUEST